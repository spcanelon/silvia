{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/leaflet-fullscreen/dist/Leaflet.fullscreen.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","L","Control","Fullscreen","extend","options","position","title","false","true","onAdd","map","container","DomUtil","create","this","link","href","_map","on","_toggleTitle","DomEvent","_click","e","stopPropagation","preventDefault","toggleFullscreen","isFullscreen","Map","include","_isFullscreen","getContainer","pseudoFullscreen","_disablePseudoFullscreen","document","exitFullscreen","mozCancelFullScreen","webkitCancelFullScreen","msExitFullscreen","_enablePseudoFullscreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","Element","ALLOW_KEYBOARD_INPUT","msRequestFullscreen","addClass","_setFullscreen","fire","removeClass","fullscreen","invalidateSize","_onFullscreenChange","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","msFullscreenElement","mergeOptions","fullscreenControl","addInitHook","fullscreenchange","addControl","onFullscreenChange","bind","whenReady","off","control"],"mappings":"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","file":"lfx-fullscreen-prod.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","L.Control.Fullscreen = L.Control.extend({\n    options: {\n        position: 'topleft',\n        title: {\n            'false': 'View Fullscreen',\n            'true': 'Exit Fullscreen'\n        }\n    },\n\n    onAdd: function (map) {\n        var container = L.DomUtil.create('div', 'leaflet-control-fullscreen leaflet-bar leaflet-control');\n\n        this.link = L.DomUtil.create('a', 'leaflet-control-fullscreen-button leaflet-bar-part', container);\n        this.link.href = '#';\n\n        this._map = map;\n        this._map.on('fullscreenchange', this._toggleTitle, this);\n        this._toggleTitle();\n\n        L.DomEvent.on(this.link, 'click', this._click, this);\n\n        return container;\n    },\n\n    _click: function (e) {\n        L.DomEvent.stopPropagation(e);\n        L.DomEvent.preventDefault(e);\n        this._map.toggleFullscreen(this.options);\n    },\n\n    _toggleTitle: function() {\n        this.link.title = this.options.title[this._map.isFullscreen()];\n    }\n});\n\nL.Map.include({\n    isFullscreen: function () {\n        return this._isFullscreen || false;\n    },\n\n    toggleFullscreen: function (options) {\n        var container = this.getContainer();\n        if (this.isFullscreen()) {\n            if (options && options.pseudoFullscreen) {\n                this._disablePseudoFullscreen(container);\n            } else if (document.exitFullscreen) {\n                document.exitFullscreen();\n            } else if (document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if (document.webkitCancelFullScreen) {\n                document.webkitCancelFullScreen();\n            } else if (document.msExitFullscreen) {\n                document.msExitFullscreen();\n            } else {\n                this._disablePseudoFullscreen(container);\n            }\n        } else {\n            if (options && options.pseudoFullscreen) {\n                this._enablePseudoFullscreen(container);\n            } else if (container.requestFullscreen) {\n                container.requestFullscreen();\n            } else if (container.mozRequestFullScreen) {\n                container.mozRequestFullScreen();\n            } else if (container.webkitRequestFullscreen) {\n                container.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);\n            } else if (container.msRequestFullscreen) {\n                container.msRequestFullscreen();\n            } else {\n                this._enablePseudoFullscreen(container);\n            }\n        }\n\n    },\n\n    _enablePseudoFullscreen: function (container) {\n        L.DomUtil.addClass(container, 'leaflet-pseudo-fullscreen');\n        this._setFullscreen(true);\n        this.fire('fullscreenchange');\n    },\n\n    _disablePseudoFullscreen: function (container) {\n        L.DomUtil.removeClass(container, 'leaflet-pseudo-fullscreen');\n        this._setFullscreen(false);\n        this.fire('fullscreenchange');\n    },\n\n    _setFullscreen: function(fullscreen) {\n        this._isFullscreen = fullscreen;\n        var container = this.getContainer();\n        if (fullscreen) {\n            L.DomUtil.addClass(container, 'leaflet-fullscreen-on');\n        } else {\n            L.DomUtil.removeClass(container, 'leaflet-fullscreen-on');\n        }\n        this.invalidateSize();\n    },\n\n    _onFullscreenChange: function (e) {\n        var fullscreenElement =\n            document.fullscreenElement ||\n            document.mozFullScreenElement ||\n            document.webkitFullscreenElement ||\n            document.msFullscreenElement;\n\n        if (fullscreenElement === this.getContainer() && !this._isFullscreen) {\n            this._setFullscreen(true);\n            this.fire('fullscreenchange');\n        } else if (fullscreenElement !== this.getContainer() && this._isFullscreen) {\n            this._setFullscreen(false);\n            this.fire('fullscreenchange');\n        }\n    }\n});\n\nL.Map.mergeOptions({\n    fullscreenControl: false\n});\n\nL.Map.addInitHook(function () {\n    if (this.options.fullscreenControl) {\n        this.fullscreenControl = new L.Control.Fullscreen(this.options.fullscreenControl);\n        this.addControl(this.fullscreenControl);\n    }\n\n    var fullscreenchange;\n\n    if ('onfullscreenchange' in document) {\n        fullscreenchange = 'fullscreenchange';\n    } else if ('onmozfullscreenchange' in document) {\n        fullscreenchange = 'mozfullscreenchange';\n    } else if ('onwebkitfullscreenchange' in document) {\n        fullscreenchange = 'webkitfullscreenchange';\n    } else if ('onmsfullscreenchange' in document) {\n        fullscreenchange = 'MSFullscreenChange';\n    }\n\n    if (fullscreenchange) {\n        var onFullscreenChange = L.bind(this._onFullscreenChange, this);\n\n        this.whenReady(function () {\n            L.DomEvent.on(document, fullscreenchange, onFullscreenChange);\n        });\n\n        this.on('unload', function () {\n            L.DomEvent.off(document, fullscreenchange, onFullscreenChange);\n        });\n    }\n});\n\nL.control.fullscreen = function (options) {\n    return new L.Control.Fullscreen(options);\n};\n"],"sourceRoot":""}