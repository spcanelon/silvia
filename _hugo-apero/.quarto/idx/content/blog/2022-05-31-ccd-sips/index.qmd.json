{"title":"Philly Center City District Sips 2022: An Interactive Map","markdown":{"yaml":{"title":"Philly Center City District Sips 2022: An Interactive Map","layout":"single-sidebar","date":"2022-05-31","publishDate":"2022-05-31","lastUpdated":"2022-06-01","slug":"ccd-sips","categories":["R","Tutorial"],"tags":["R","maps","webscraping","robotstxt","rvest","leaflet","ggmap"],"subtitle":"An interactive map showing restaurants participating in CCD Sips 2022 & a companion R tutorial on webscraping, geocoding, and map-making","summary":"An interactive map showing restaurants participating in CCD Sips 2022 & a companion R tutorial on webscraping, geocoding, and map-making","featured":"yes","links":[{"icon":"map-marked-alt","icon_pack":"fas","name":"Interactive Map","url":"http://tiny.cc/ccdsips2022"}],"format":"hugo"},"headingText":"Tutorial start","containsRefs":false,"markdown":"\n\nPhilly's Center City District posted a list of restaurants and bars participating in Philly's 2022 [CCD Sips](https://centercityphila.org/explore-center-city/ccdsips). CCD Sips is a series of summer Wednesday evenings (4:30-7pm) filled with **happy hour specials**, between June 1st and August 31st.\n\nI prefer to take in this information as a **map** instead of a list, so I scraped some information from the website and made one! You can click or tap on the circle map markers to see information about each restaurant/bar along with a direct link to their posted happy hour specials.\n\nCheck out the link at the top of this post for a larger version of the interactive map below. And jump down to the [tutorial](#tutorial-start) if you'd like to learn how I used R to build the interactive map!\n\n<!--https://dannyda.com/2021/06/09/how-to-make-html-iframe-responsive-iframe-height-equal-to-viewport-screen-height/-->\n<style>\niframe {\ndisplay: block;\nbackground: #FFFFFF;\nborder: none; /* Reset default border */\nheight: 70vh; /* Viewport-relative units */\nwidth: 100%;\n}\n</style>\n<iframe src=\"map.html\" scrolling=\"no\">\n</iframe>\n\n\n```{r setup, include=FALSE}\nxfun::pkg_attach(\"tidyverse\", \"rvest\", \"robotstxt\", \"here\", \"ggmap\", \"leaflet\", \"leaflet.extras\", \"xaringanExtra\")\n\nhtmltools::tagList(\n  xaringanExtra::use_clipboard(\n    button_text = \"<i class=\\\"fa fa-copy\\\"></i> Copy Code\",\n    success_text = \"<i class=\\\"fa fa-check\\\" style=\\\"color: #90BE6D\\\"></i> Copied!\",\n  ),\n  rmarkdown::html_dependency_font_awesome()\n)\n```\n\nAside from the `tidyverse` and `here` packages, I used a handful of R packages to bring this map project together.\n\n| Package          | Purpose                                   | Version |\n|------------------|-------------------------------------------|---------|\n| `robotstxt`      | Check website for scraping permissions    | 0.7.13  |\n| `rvest`          | Scrape the information off of the website | 1.0.1   |\n| `ggmap`          | Geocode the restaurant addresses          | 3.0.0   |\n| `leaflet`        | Build the interactive map                 | 2.0.4.1 |\n| `leaflet.extras` | Add extra functionality to map            | 1.0.0   |\n\n## Scraping the data\n\n### Checking site permissions\n\nCheck the site's terms of service using the [robotstxt](https://docs.ropensci.org/robotstxt/) package, which downloads and parses the site's robots.txt file.\n\nWhat I wanted to look for was whether any pages are not allowed to be crawled by bots/scrapers. In my case there weren't any, indicated by `Allow: /`.\n\n```{r check-permissions, eval=FALSE}\nget_robotstxt(\"https://centercityphila.org/explore-center-city/ccd-sips/sips-list-view\")\n```\n\n<details><summary>Output</summary>\n\n```md\n[robots.txt]\n--------------------------------------\n\n# robots.txt overwrite by: on_suspect_content\n\nUser-agent: *\nAllow: /\n\n\n\n[events]\n--------------------------------------\n\nrequested:   https://centercityphila.org/explore-center-city/ccd-sips/sips-list-view/robots.txt \ndownloaded:  https://centercityphila.org/explore-center-city/ccd-sips/sips-list-view/robots.txt \n\n$on_not_found\n$on_not_found$status_code\n[1] 404\n\n\n$on_file_type_mismatch\n$on_file_type_mismatch$content_type\n[1] \"text/html; charset=utf-8\"\n\n\n$on_suspect_content\n$on_suspect_content$parsable\n[1] FALSE\n\n$on_suspect_content$content_suspect\n[1] TRUE\n\n\n[attributes]\n--------------------------------------\n\nproblems, cached, request, class\n```\n\n</details>\n\n### Harvesting data from the first page\n\nThen I used the [rvest](https://rvest.tidyverse.org/index.html) package to scrape the information from the tables of restaurants/bars participating in CCD Sips.\n\nI've learned that ideally you would only scrape each page once, so I checked my approach with the first page before I wrote a function to scrape the remaining pages.\n\n```{r scrape-pg-1}\n# define the page\nurl <- \"https://centercityphila.org/explore-center-city/ccd-sips/sips-list-view?page=1\"\n\n# read the page html\nhtml1 <- read_html(url)\n\n# extract table info\ntable1 <- \n  html1 |> \n  html_node(\"table\") |> \n  html_table()\ntable1 |> head(3) |> kableExtra::kable()\n\n# extract hyperlinks to specific restaurant/bar specials\nlinks <- \n  html1 |> \n  html_elements(\".o-table__tag.ccd-text-link\") |> \n  html_attr(\"href\") |> \n  as_tibble()\nlinks |> head(3) |> kableExtra::kable()\n\n# add full hyperlinks to the table info\ntable1Mod <-\n  bind_cols(table1, links) |> \n  mutate(Specials = paste0(url, value)) |> \n  select(-c(`CCD SIPS Specials`, value))\ntable1Mod |> head(3) |> kableExtra::kable()\n```\n\n### Harvesting data from the remaining pages\n\nOnce I could confirm that the above approach harvested the information I needed, I adapted the code into a function that I could apply to pages 2-3 of the site.\n\n```{r create-function}\ngetTables <- function(pageNumber) {\n  Sys.sleep(2)\n  \n  url <- paste0(\"https://centercityphila.org/explore-center-city/ccd-sips/sips-list-view?page=\", pageNumber)\n  \n  html <- read_html(url)\n  \n  table <- \n    html |> \n    html_node(\"table\") |>\n    html_table()\n  \n  links <- \n    html |> \n    html_elements(\".o-table__tag.ccd-text-link\") |> \n    html_attr(\"href\") |> \n    as_tibble()\n  \n  tableSpecials <<-\n    bind_cols(table, links) |> \n    mutate(Specials = paste0(url, value)) |> \n    select(-c(`CCD SIPS Specials`, value))\n}\n```\n\nI used my `getTable()` function and the `purrr::map_df()` function to harvest the table of restaurants/bars from pages 2 and 3. Then I combined all the data frames together and saved the complete data frame as an `.Rds` object so that I wouldn't have to scrape the data again.\n\n```{r scrape-remaining, eval=FALSE}\n# get remaining tables\ntable2 <- map_df(2:3, getTables) \n\n# combine all tables\ntable <- bind_rows(table1Mod, table2)\ntable |> head(3) |> kableExtra::kable()\n```\n\n```{r scrape-remaining-show, echo=FALSE}\ntable <- read_rds(here(\"content/blog/2022-05-31-ccd-sips/specialsScraped.Rds\"))\ntable |> head(3) |> kableExtra::kable()\n```\n\n```{r save-specials, eval=FALSE}\n# save full table to file\nwrite_rds(\n  table,\n  file = here(\"content/blog/2022-05-31-ccd-sips/specialsScraped.Rds\")\n  )\n```\n\n## Geocoding addresses\n\nThe next step was to use geocoding to convert the restaurant/bar addresses to geographical coordinates (longitude and latitude) that I could map. I used the [ggmap](https://github.com/dkahle/ggmap) package and the Google Geocoding API service because this was a small project (59 addresses/requests) which wouldn't make a dent in the [free credit available on the platform](https://mapsplatform.google.com/pricing/).\n\nThe last time I geocoded addresses was for an [almost identical project in 2019](../2019-ccd-sips) and I had issues using the same API key from back then, so I made a new one. I restricted my new key to the Geocoding and Geolocation APIs.\n\n```{r, geocode-addresses, eval=FALSE}\n# register my API key\n# ggmap::register_google(key = \"[your key]\")\n\n# geocode addresses\nspecials_ggmap <- \n  table |> \n  mutate_geocode(Address)\n\n# rename new variables\nspecials <- \n  specials_ggmap |> \n  rename(Longitude = lon,\n         Latitude = lat) \nspecials |> head(3) |> kableExtra::kable()\n```\n\n```{r load-geocoded, echo=FALSE}\nspecials <- read_rds(here(\"content/blog/2022-05-31-ccd-sips/specialsGeocoded.Rds\"))\nspecials |> head(3) |> kableExtra::kable()\n```\n\nI made sure to save the new data frame with geographical coordinates as an `.Rds` object so I wouldn't have to geocode the data again! This would be particularly important if I was working on a large project.\n\n```{r save-geocoded, eval=FALSE}\n# save table with geocoded addresses to file\nwrite_rds(\n  specials,\n  file = here(\"content/blog/2022-05-31-ccd-sips/specialsGeocoded.Rds\"))\n```\n\n## Building the map\n\nTo build the map, I used the [leaflet](https://rstudio.github.io/leaflet/) package. Some of the resources I found helpful, in addition to the package documentation:\n\n-   [Scrape website data with the new R package rvest (+ a postscript on interacting with web pages with RSelenium) · Hollie at ZevRoss](https://www.zevross.com/blog/2015/05/19/scrape-website-data-with-the-new-r-package-rvest/) -- how to style pop-ups\n-   [Leaflet Map Markers in R · Jindra Lacko](https://www.jla-data.net/eng/leaflet-markers-in-r/) -- how to customize marker icons\n-   [A guide to basic Leaflet accessibility · Leaflet](https://leafletjs.com/examples/accessibility/) -- accessibility considerations. Though it's unclear to me how these features built into the Leaflet library translate over to the leaflet R package. For example, I couldn't find an option for adding alt-text or a title to each marker, but maybe I wasn't looking in the right place within the documentation.\n\n### Customizing map markers\n\n```{r style-markers}\n# style pop-ups for the map with inline css styling\n\n# marker for the restaurants/bars\npopInfoCircles <- paste(\"<h2 style='font-family: Red Hat Text, sans-serif; font-size: 1.6em; color:#43464C;'>\", \"<a style='color: #00857A;' href=\", specials$Specials, \">\", specials$Name, \"</a></h2>\",\"<p style='font-family: Red Hat Text, sans-serif; font-weight: normal; font-size: 1.5em; color:#9197A6;'>\", specials$Address, \"</p>\")\n\n# marker for the center of the map\npopInfoMarker<-paste(\"<h1 style='padding-top: 0.5em; margin-top: 1em; margin-bottom: 0.5em; font-family: Red Hat Text, sans-serif; font-size: 1.8em; color:#43464C;'>\", \"<a style='color: #00857A;' href='https://centercityphila.org/explore-center-city/ccdsips'>\", \"Center City District Sips 2022\", \"</a></h1><p style='color:#9197A6; font-family: Red Hat Text, sans-serif; font-size: 1.5em; padding-bottom: 1em;'>\", \"Philadelphia, PA\", \"</p>\")\n\n# custom icon for the center of the map\nawesome <-\n  makeAwesomeIcon(\n    icon = \"map-pin\",\n    iconColor = \"#FFFFFF\",\n    markerColor = \"darkblue\",\n    library = \"fa\"\n  )\n```\n\n### Plotting the restaurants/bars\n\n```{r add-restaurants}\nleaflet(data = specials, \n        width = \"100%\", \n        height = \"850px\",\n        # https://stackoverflow.com/a/42170340\n        options = tileOptions(minZoom = 15,\n                              maxZoom = 19)) |>\n  # add map markers ----\n  addCircles(\n    lat = ~ specials$Latitude, \n    lng = ~ specials$Longitude, \n    fillColor = \"#009E91\", #olivedrab goldenrod\n    fillOpacity = 0.6, \n    stroke = F,\n    radius = 12, \n    popup = popInfoCircles,\n    label = ~ Name,\n    labelOptions = labelOptions(\n      style = list(\n        \"font-family\" = \"Red Hat Text, sans-serif\",\n        \"font-size\" = \"1.2em\")\n      ))\n```\n\n### Adding the map background\n\n```{r add-background}\nleaflet(data = specials, \n        width = \"100%\", \n        height = \"850px\",\n        # https://stackoverflow.com/a/42170340\n        options = tileOptions(minZoom = 15,\n                              maxZoom = 19)) |>\n  # add map markers ----\n  addCircles(\n    lat = ~ specials$Latitude, \n    lng = ~ specials$Longitude, \n    fillColor = \"#009E91\", #olivedrab goldenrod\n    fillOpacity = 0.6, \n    stroke = F,\n    radius = 12, \n    popup = popInfoCircles,\n    label = ~ Name,\n    labelOptions = labelOptions(\n      style = list(\n        \"font-family\" = \"Red Hat Text, sans-serif\",\n        \"font-size\" = \"1.2em\")\n      )) |>\n  # add map tiles in the background ----\n  addProviderTiles(providers$CartoDB.Positron)\n```\n\n### Setting the map view\n\n```{r set-view}\nleaflet(data = specials, \n        width = \"100%\", \n        height = \"850px\",\n        # https://stackoverflow.com/a/42170340\n        options = tileOptions(minZoom = 15,\n                              maxZoom = 19)) |>\n  # add map markers ----\n  addCircles(\n    lat = ~ specials$Latitude, \n    lng = ~ specials$Longitude, \n    fillColor = \"#009E91\", #olivedrab goldenrod\n    fillOpacity = 0.6, \n    stroke = F,\n    radius = 12, \n    popup = popInfoCircles,\n    label = ~ Name,\n    labelOptions = labelOptions(\n      style = list(\n        \"font-family\" = \"Red Hat Text, sans-serif\",\n        \"font-size\" = \"1.2em\")\n      )) |>\n  # add map tiles in the background ----\n  addProviderTiles(providers$CartoDB.Positron) |>\n  # set the map view\n  setView(mean(specials$Longitude), \n          mean(specials$Latitude), \n          zoom = 16)\n```\n\n### Adding a marker at the center\n\n```{r add-marker}\nleaflet(data = specials, \n        width = \"100%\", \n        height = \"850px\",\n        # https://stackoverflow.com/a/42170340\n        options = tileOptions(minZoom = 15,\n                              maxZoom = 19)) |>\n  # add map markers ----\n  addCircles(\n    lat = ~ specials$Latitude, \n    lng = ~ specials$Longitude, \n    fillColor = \"#009E91\", #olivedrab goldenrod\n    fillOpacity = 0.6,\n    stroke = F,\n    radius = 12, \n    popup = popInfoCircles,\n    label = ~ Name,\n    labelOptions = labelOptions(\n      style = list(\n        \"font-family\" = \"Red Hat Text, sans-serif\",\n        \"font-size\" = \"1.2em\")\n      )) |>\n  # add map tiles in the background ----\n  addProviderTiles(providers$CartoDB.Positron) |>\n  # set the map view\n  setView(mean(specials$Longitude), \n          mean(specials$Latitude), \n          zoom = 16) |>\n  # add marker at the center ----\n  addAwesomeMarkers(\n    icon = awesome,\n    lng = mean(specials$Longitude), \n    lat = mean(specials$Latitude), \n    label = \"Center City District Sips 2022\",\n    labelOptions = labelOptions(\n      style = list(\n        \"font-family\" = \"Red Hat Text, sans-serif\",\n        \"font-size\" = \"1.2em\")\n      ),\n    popup = popInfoMarker,\n    popupOptions = popupOptions(maxWidth = 250))\n```\n\n### Adding fullscreen control\n\n```{r add-fullscreen}\nleaflet(data = specials, \n        width = \"100%\", \n        height = \"850px\",\n        # https://stackoverflow.com/a/42170340\n        options = tileOptions(minZoom = 15,\n                              maxZoom = 19)) |>\n  # add map markers ----\n  addCircles(\n    lat = ~ specials$Latitude, \n    lng = ~ specials$Longitude, \n    fillColor = \"#009E91\", #olivedrab goldenrod\n    fillOpacity = 0.6, \n    stroke = F,\n    radius = 12, \n    popup = popInfoCircles,\n    label = ~ Name,\n    labelOptions = labelOptions(\n      style = list(\n        \"font-family\" = \"Red Hat Text, sans-serif\",\n        \"font-size\" = \"1.2em\")\n      )) |>\n  # add map tiles in the background ----\n  addProviderTiles(providers$CartoDB.Positron) |>\n  # set the map view\n  setView(mean(specials$Longitude), \n          mean(specials$Latitude), \n          zoom = 16) |>\n  # add marker at the center ----\n  addAwesomeMarkers(\n    icon = awesome,\n    lng = mean(specials$Longitude), \n    lat = mean(specials$Latitude), \n    label = \"Center City District Sips 2022\",\n    labelOptions = labelOptions(\n      style = list(\n        \"font-family\" = \"Red Hat Text, sans-serif\",\n        \"font-size\" = \"1.2em\")\n      ),\n    popup = popInfoMarker,\n    popupOptions = popupOptions(maxWidth = 250)) |> \n  # add fullscreen control button ----\n  leaflet.extras::addFullscreenControl()\n```\n\n## Creating the map with Quarto\n\nThe first time around, I created a standalone map by first running an R script with the necessary code, and then exporting the HTML output as a webpage. This worked well enough, except that I realized:\n\n1. The title of the map webpage (the name that is displayed on a browser tab) was just \"map\" because the name of the HTML file was `map.html`. I wanted something more descriptive.\n1. The map wasn't mobile-responsive. In other words, the map markers and text looked too small when viewed on a mobile device.\n\n### Changing the webpage title\n\nThe webpage title was a quick one to fix thanks to a Stack Overflow response to a [question about turning off the title in an R Markdown document](https://stackoverflow.com/questions/59668347/rmarkdown-turn-off-title). The `pagetitle` YAML option lets you set the HTML's title tag independently of the document title:\n\n```yaml\npagetitle: \"Philly CCD Sips 2022 Map\"\n```\n\n### Fixing the mobile-responsiveness\n\nThe mobile-responsiveness issue could be solved by adding metadata to the map HTML, but I would need to be able to blend HTML with R code. I have been practicing using [Quarto](https://quarto.org/) and figured I could make a standalone map from a Quarto document (`.qmd`) rather than an R Markdown one (`.Rmd` or `.Rmarkdown`). You can find the map's Quarto document [alongside this blog post](https://github.com/spcanelon/silvia/blob/main/content/blog/2022-05-31-ccd-sips/map.qmd).\n\nAccording to the [Leaflet library documentation](https://leafletjs.com/examples/mobile/) and [this Stack Overflow answer](https://stackoverflow.com/a/42796918), fixing the map to be mobile-responsive required adding the following metadata to the HTML code:\n\n```html\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" />\n```\n\nI used the [metathis](https://pkg.garrickadenbuie.com/metathis) R package to add this metadata to an R code chunk in my Quarto document using the `meta_viewport()` function:\n\n```{r meta-viewport, eval=FALSE}\n# make mobile-responsive\nmeta_viewport(\n  width = \"device-width\",\n  initial_scale = \"1.0\",\n  maximum_scale = \"1.0\",\n  user_scalable = \"no\"\n  )\n```\n\n> Update: In the process of updating this post I'm noticing that specifying the viewport metadata tag doesn't seem to be necessary anymore, and I don't understand why 🤔 ...so I'll leave the step as is, just in case it's helpful to anyone 🤷🏽‍♀️\n\n### Adding social media tags\n\nThen I added more metadata. I was particularly interested in adding social media tags so that if I (or anyone else) shared this map webpage, [an informative preview would display as a social card](https://twitter.com/spcanelon/status/1531644079687229441).\n\nI used the `meta_social()` function to add these tags:\n\n```{r meta-social, eval=FALSE}\n# tags for social media\nmeta_social(\n  title = \"Philly CCD Sips 2022 Interactive Map\",\n  url = \"https://www.silviacanelon.com/blog/2022-ccd-sips/map.html\",\n  image = \"https://github.com/spcanelon/silvia/blob/main/content/blog/2022-05-31-ccd-sips/featured.png?raw=true\",\n  image_alt = \"Map of Philly's Center City with a pop-up saying Center City District Sips 2022\",\n  og_type = \"website\",\n  og_author = \"Silvia Canelón\",\n  twitter_card_type = \"summary_large_image\",\n  twitter_creator = \"@spcanelon\"\n)\n```\n\nGreat, I had added all of the metadata I was interested in! Except that because I was using Quarto, and not one of the [more common outputs](https://pkg.garrickadenbuie.com/metathis/index.html#works-in) I had a couple of extra steps to take: \n\n1. Write my metadata tags to an HTML file, using the `write_meta()` function:\n\n    ```r\n    # write meta tags to file\n    write_meta(path = \"meta-map.html\")\n    ```\n\n2. Manually include this HTML in my webpage via the Quarto file. The [`include-in-header`](https://quarto.org/docs/output-formats/html-basics.html#includes) Quarto YAML option helped me here:\n\n    ```yaml\n    include-in-header: meta-map.html\n    ```\n\n### Making the map fullscreen\n\nA side effect of creating the map from a Quarto (or R Markdown) document is that the output is styled by default to fit within the width of an article (in this case 900 pixels). I wanted the map to take up the whole width of the page, so I made use of the [`page-layout`](https://quarto.org/docs/interactive/layout.html#full-page-layout) Quarto YAML option:\n\n```yaml\nformat: \n  html:\n    page-layout: custom\n```\n\nAnother option that worked pretty well was to use the `column: screen` code chunk option built into Quarto. The Quarto documentation even shows an [example to display a Leaflet map](https://quarto.org/docs/authoring/article-layout.html#screen-column) I but it left a thin margin at the top margin, and I wanted the map to be flush against the top edge of the webpage.\n\n### Rendering the standalone map\n\nLastly, I added one more option to the YAML that would render the Quarto document into a [self-contained HTML](https://quarto.org/docs/output-formats/html-publishing.html#standalone-html) with all of the content needed to create the map.\n\n```yaml\nformat:\n  html:\n    page-layout: custom\n    self-contained: true\n```\n"},"formats":{"hugo":{"execute":{"fig-width":8,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":true,"output-divs":false,"output-ext":"md","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"variant":"+autolink_bare_uris+emoji+footnotes+gfm_auto_identifiers+pipe_tables+strikeout+task_lists+tex_math_dollars+yaml_metadata_block+definition_lists+smart","shortcodes":[]},"pandoc":{"standalone":true,"default-image-extension":"png","to":"markdown_strict+raw_html+all_symbols_escapable+backtick_code_blocks+fenced_code_blocks+space_in_atx_header+intraword_underscores+lists_without_preceding_blankline+shortcut_reference_links","wrap":"preserve","filters":[],"output-file":"index.md"},"language":{},"metadata":{"revealjs-plugins":[],"title":"Philly Center City District Sips 2022: An Interactive Map","layout":"single-sidebar","date":"2022-05-31","publishDate":"2022-05-31","lastUpdated":"2022-06-01","slug":"ccd-sips","categories":["R","Tutorial"],"tags":["R","maps","webscraping","robotstxt","rvest","leaflet","ggmap"],"subtitle":"An interactive map showing restaurants participating in CCD Sips 2022 & a companion R tutorial on webscraping, geocoding, and map-making","summary":"An interactive map showing restaurants participating in CCD Sips 2022 & a companion R tutorial on webscraping, geocoding, and map-making","featured":"yes","links":[{"icon":"map-marked-alt","icon_pack":"fas","name":"Interactive Map","url":"http://tiny.cc/ccdsips2022"}]}}}}