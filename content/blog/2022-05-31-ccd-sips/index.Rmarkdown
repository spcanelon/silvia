---
title: 'Philly Center City District Sips 2022: An Interactive Map'
layout: single-sidebar
date: '2022-05-31'
publishDate: '2022-05-31'
slug: ccd-sips
categories:
  - R
  - Tutorial
tags:
  - R
  - maps
  - webscraping
  - robotstxt
  - rvest
  - leaflet
  - ggmap
subtitle: 'An interactive map showing restaurants participating in CCD Sips 2022 & a companion R tutorial on webscraping, geocoding, and map-making'
summary: 'An interactive map showing restaurants participating in CCD Sips 2022 & a companion R tutorial on webscraping, geocoding, and map-making'
featured: yes
links:
- icon: map-marked-alt
  icon_pack: fas
  name: Interactive Map
  url: /blog/2022-ccd-sips/map.html
format: hugo
---

Philly's Center City District posted a list of restaurants and bars participating in Philly's 2022 [CCD Sips](https://centercityphila.org/explore-center-city/ccdsips). CCD Sips is a series of summer Wednesday evenings (4:30-7pm) filled with **happy hour specials**, between June 1st and August 31st.

I prefer to take in this information as a **map** instead of a list, so I scraped some information from the website and made one! You can click or tap on the circle map markers to see information about each restaurant/bar along with a direct link to their posted happy hour specials.

Check out the link at the top of this post for a full-screen version of the interactive map below. And jump down to the [tutorial](#overview) if you'd like to learn how I used R to build the interactive map!

<div style="align: center; margin-left: -150px;"> <iframe src="map.html" width="1000px" height="850px" frameborder="0"></iframe></div>

## Tutorial start

```{r setup, include=FALSE}
xfun::pkg_attach("tidyverse", "rvest", "robotstxt", "here", "ggmap", "leaflet", "leaflet.extras")
```

Aside from the `tidyverse` and `here` packages, I used a handful of R packages to bring this map project together.

| Package          | Purpose                                   | Version |
|------------------|-------------------------------------------|---------|
| `robotstxt`      | Check website for scraping permissions    | 0.7.13  |
| `rvest`          | Scrape the information off of the website | 1.0.1   |
| `ggmap`          | Geocode the restaurant addresses          | 3.0.0   |
| `leaflet`        | Build the interactive map                 | 2.0.4.1 |
| `leaflet.extras` | Add extra functionality to map            | 1.0.0   |

## Scraping the data

### Checking site permissions

Check the site's terms of service using the [robotstxt](https://docs.ropensci.org/robotstxt/) package, which downloads and parses the site's robots.txt file.

What I wanted to look for was whether any pages are not allowed to be crawled by bots/scrapers. In my case there weren't any, indicated by `Allow: /`.

```{r check-permissions, eval=FALSE}
get_robotstxt("https://centercityphila.org/explore-center-city/ccd-sips/sips-list-view")
```

<details><summary>Output</summary>
```md
[robots.txt]
--------------------------------------

# robots.txt overwrite by: on_suspect_content

User-agent: *
Allow: /



[events]
--------------------------------------

requested:   https://centercityphila.org/explore-center-city/ccd-sips/sips-list-view/robots.txt 
downloaded:  https://centercityphila.org/explore-center-city/ccd-sips/sips-list-view/robots.txt 

$on_not_found
$on_not_found$status_code
[1] 404


$on_file_type_mismatch
$on_file_type_mismatch$content_type
[1] "text/html; charset=utf-8"


$on_suspect_content
$on_suspect_content$parsable
[1] FALSE

$on_suspect_content$content_suspect
[1] TRUE


[attributes]
--------------------------------------

problems, cached, request, class
```

</details>

### Harvesting data from the first page

Then I used the [rvest](https://rvest.tidyverse.org/index.html) package to scrape the information from the tables of restaurants/bars participating in CCD Sips.

I've learned that ideally you would only scrape each page once, so I checked my approach with the first page before I wrote a function to scrape the remaining pages.

```{r scrape-pg-1}
# define the page
url <- "https://centercityphila.org/explore-center-city/ccd-sips/sips-list-view?page=1"

# read the page html
html1 <- read_html(url)

# extract table info
table1 <- 
  html1 %>% 
  html_node("table") %>% 
  html_table()
table1 %>% head(3) %>% kableExtra::kable()

# extract hyperlinks to specific restaurant/bar specials
links <- 
  html1 %>% 
  html_elements(".o-table__tag.ccd-text-link") %>% 
  html_attr("href") %>% 
  as_tibble()
links %>% head(3) %>% kableExtra::kable()

# add full hyperlinks to the table info
table1Mod <-
  bind_cols(table1, links) %>% 
  mutate(Specials = paste0(url, value)) %>% 
  select(-c(`CCD SIPS Specials`, value))
table1Mod %>% head(3) %>% kableExtra::kable()
```

### Harvesting data from the remaining pages

Once I could confirm that the above approach harvested the information I needed, I adapted the code into a function that I could apply to pages 2-3 of the site.

```{r create-function}
getTables <- function(pageNumber) {
  Sys.sleep(2)
  
  url <- paste0("https://centercityphila.org/explore-center-city/ccd-sips/sips-list-view?page=", pageNumber)
  
  html <- read_html(url)
  
  table <- 
    html %>% 
    html_node("table") %>%
    html_table()
  
  links <- 
    html %>% 
    html_elements(".o-table__tag.ccd-text-link") %>% 
    html_attr("href") %>% 
    as_tibble()
  
  tableSpecials <<-
    bind_cols(table, links) %>% 
    mutate(Specials = paste0(url, value)) %>% 
    select(-c(`CCD SIPS Specials`, value))
}
```

I used my `getTable()` function and the `purrr::map_df()` function to harvest the table of restaurants/bars from pages 2 and 3. Then I combined all the data frames together and saved the complete data frame as an `.Rds` object so that I wouldn't have to scrape the data again.

```{r scrape-remaining, eval=FALSE}
# get remaining tables
table2 <- map_df(2:3, getTables) 

# combine all tables
table <- bind_rows(table1Mod, table2)
table %>% head(3) %>% kableExtra::kable()
```

```{r scrape-remaining-show, echo=FALSE}
table <- read_rds(here("content/blog/2022-05-31-ccd-sips/specialsScraped.Rds"))
table %>% head(3) %>% kableExtra::kable()
```

```{r save-specials, eval=FALSE}
# save full table to file
write_rds(
  table,
  file = here("content/blog/2022-05-31-ccd-sips/specialsScraped.Rds")
  )
```

## Geocoding addresses

The next step was to use geocoding to convert the restaurant/bar addresses to geographical coordinates (longitude and latitude) that I could map. I used the [ggmap](https://github.com/dkahle/ggmap) package and the Google Geocoding API service because this was a small project (59 addresses/requests) which wouldn't make a dent in the [free credit available on the platform](https://mapsplatform.google.com/pricing/).

The last time I geocoded addresses was for an [almost identical project in 2019](../2019-ccd-sips) and I had issues using the same API key from back then, so I made a new one. I restricted my new key to the Geocoding and Geolocation APIs.

```{r, geocode-addresses, eval=FALSE}
# register my API key
# ggmap::register_google(key = "[your key]")

# geocode addresses
specials_ggmap <- 
  table %>% 
  mutate_geocode(Address)

# rename new variables
specials <- 
  specials_ggmap %>% 
  rename(Longitude = lon,
         Latitude = lat) 
specials %>% head(3) %>% kableExtra::kable()
```

```{r load-geocoded, echo=FALSE}
specials <- read_rds(here("content/blog/2022-05-31-ccd-sips/specialsGeocoded.Rds"))
specials %>% head(3) %>% kableExtra::kable()
```

I made sure to save the new data frame with geographical coordinates as an `.Rds` object so I wouldn't have to geocode the data again! This would be particularly important if I was working on a large project.

```{r save-geocoded, eval=FALSE}
# save table with geocoded addresses to file
write_rds(
  specials,
  file = here("content/blog/2022-05-31-ccd-sips/specialsGeocoded.Rds"))
```

## Creating the map

To create the map, I used the [leaflet](https://rstudio.github.io/leaflet/) package. Some of the resources I found helpful, in addition to the package documentation:

-   [Scrape website data with the new R package rvest (+ a postscript on interacting with web pages with RSelenium) · Hollie at ZevRoss](https://www.zevross.com/blog/2015/05/19/scrape-website-data-with-the-new-r-package-rvest/) -- how to style pop-ups
-   [Leaflet Map Markers in R · Jindra Lacko](https://www.jla-data.net/eng/leaflet-markers-in-r/) -- how to customize marker icons
-   [A guide to basic Leaflet accessibility · Leaflet](https://leafletjs.com/examples/accessibility/) -- accessibility considerations. Though it's unclear to me how these features built into the Leaflet library translate over to the leaflet R package. For example, I couldn't find an option for adding alt-text or a title to each marker, but maybe I wasn't looking in the right place within the documentation.

### Customize map markers

```{r style-markers}
# style pop-ups for the map with inline css styling

# marker for the restaurants/bars
popInfoCircles <- paste("<h2 style='font-family: Red Hat Text, sans-serif; font-size: 1.6em; color:#43464C;'>", "<a style='color: #00857A;' href=", specials$Specials, ">", specials$Name, "</a></h2>","<p style='font-family: Red Hat Text, sans-serif; font-weight: normal; font-size: 1.5em; color:#9197A6;'>", specials$Address, "</p>")

# marker for the center of the map
popInfoMarker<-paste("<h1 style='padding-top: 0.5em; margin-top: 1em; margin-bottom: 0.5em; font-family: Red Hat Text, sans-serif; font-size: 1.8em; color:#43464C;'>", "<a style='color: #00857A;' href='https://centercityphila.org/explore-center-city/ccdsips'>", "Center City District Sips 2022", "</a></h1><p style='color:#9197A6; font-family: Red Hat Text, sans-serif; font-size: 1.5em; padding-bottom: 1em;'>", "Philadelphia, PA", "</p>")

# custom icon for the center of the map
awesome <-
  makeAwesomeIcon(
    icon = "map-pin",
    iconColor = "#FFFFFF",
    markerColor = "darkblue",
    library = "fa"
  )
```

### Plot the restaurants/bars

```{r add-restaurants}
leaflet(data = specials, width = "100%") %>%
  # add map markers
  addCircles(lat = ~ specials$Latitude, 
             lng = ~ specials$Longitude, 
             fillColor = "#009E91",
             fillOpacity = 0.6, 
             stroke = F,
             radius = 12, 
             popup = popInfoCircles,
             label = ~ Name,
             labelOptions = labelOptions(
               style = list("font-family" = "Red Hat Text, sans-serif",
                            "font-size" = "1.2em")
             ))
```

### Add map background

```{r add-background}
leaflet(data = specials, width = "100%") %>%
  # add map markers
  addCircles(lat = ~ specials$Latitude, 
             lng = ~ specials$Longitude, 
             fillColor = "#009E91",
             fillOpacity = 0.6, 
             stroke = F,
             radius = 12, 
             popup = popInfoCircles,
             label = ~ Name,
             labelOptions = labelOptions(
               style = list("font-family" = "Red Hat Text, sans-serif",
                            "font-size" = "1.2em")
             )) %>%
  # add map tiles in the background
  addProviderTiles(providers$CartoDB.Positron)
```

### Set map view

```{r set-view}
leaflet(data = specials, width = "100%") %>%
  # add map markers
  addCircles(lat = ~ specials$Latitude, 
             lng = ~ specials$Longitude, 
             fillColor = "#009E91",
             fillOpacity = 0.6, 
             stroke = F,
             radius = 12, 
             popup = popInfoCircles,
             label = ~ Name,
             labelOptions = labelOptions(
               style = list("font-family" = "Red Hat Text, sans-serif",
                            "font-size" = "1.2em")
             )) %>%
  # add map tiles in the background
  addProviderTiles(providers$CartoDB.Positron) %>%
  # set the map view
  setView(mean(specials$Longitude), 
          mean(specials$Latitude), 
          zoom = 17 )
```

### Add marker at center

```{r add-marker}
leaflet(data = specials, width = "100%") %>%
  # add map markers
  addCircles(lat = ~ specials$Latitude, 
             lng = ~ specials$Longitude, 
             fillColor = "#009E91",
             fillOpacity = 0.6, 
             stroke = F,
             radius = 12, 
             popup = popInfoCircles,
             label = ~ Name,
             labelOptions = labelOptions(
               style = list("font-family" = "Red Hat Text, sans-serif",
                            "font-size" = "1.2em")
             )) %>%
  # add map tiles in the background
  addProviderTiles(providers$CartoDB.Positron) %>%
  # set the map view
  setView(mean(specials$Longitude), 
          mean(specials$Latitude), 
          zoom=17) %>%
  # add center marker
  addAwesomeMarkers(icon = awesome,
                    lng = mean(specials$Longitude), 
                    lat = mean(specials$Latitude), 
                    label = "Center City District Sips 2022",
                    labelOptions = labelOptions(
                      style = list("font-family" = "Red Hat Text, sans-serif",
                                   "font-size" = "1.2em")
             ),
                    popup = popInfoMarker,
                    popupOptions = popupOptions(maxWidth = 350))
```

### Add fullscreen control

```{r add-fullscreen}
leaflet(data = specials, width = "100%") %>%
  # add map markers
  addCircles(lat = ~ specials$Latitude, 
             lng = ~ specials$Longitude, 
             fillColor = "#009E91",
             fillOpacity = 0.6, 
             stroke = F,
             radius = 12, 
             popup = popInfoCircles,
             label = ~ Name,
             labelOptions = labelOptions(
               style = list("font-family" = "Red Hat Text, sans-serif",
                            "font-size" = "1.2em")
             )) %>%
  # add map tiles in the background
  addProviderTiles(providers$CartoDB.Positron) %>%
  # set the map view
  setView(mean(specials$Longitude), 
          mean(specials$Latitude), 
          zoom=17) %>%
  # add center marker
  addAwesomeMarkers(icon = awesome,
                    lng = mean(specials$Longitude), 
                    lat = mean(specials$Latitude), 
                    label = "Center City District Sips 2022",
                    labelOptions = labelOptions(
                      style = list("font-family" = "Red Hat Text, sans-serif",
                                   "font-size" = "1.2em")
             ),
                    popup = popInfoMarker,
                    popupOptions = popupOptions(maxWidth = 350)) %>% 
  # add fullscreen control button
  leaflet.extras::addFullscreenControl()
```

