{"title":"Hello Umami: Deploying a Privacy-Friendly Open Source Tool for Web Analytics","markdown":{"yaml":{"title":"Hello Umami: Deploying a Privacy-Friendly Open Source Tool for Web Analytics","layout":"single-sidebar","date":"2022-01-18","slug":"hello-umami","alias":null,"categories":["R","Website"],"tags":["R","blogdown","Hugo"],"image":"featured.jpg","subtitle":"A use case for adding Umami web analytics to a blogdown site and deploying using Railway.","summary":"A use case for adding Umami web analytics to a blogdown site and deploying using Railway.","featured":"yes","links":[{"icon":"chart-line","icon_pack":"fas","name":"Umami Docs","url":"https://umami.is"}]},"headingText":"What to expect","containsRefs":false,"markdown":"\n\n```{r setup, echo=FALSE, warning=FALSE, message=FALSE}\nlibrary(xaringanExtra)\nlibrary(tidyverse)\nlibrary(rtweet)\nlibrary(tweetrmd)\n\nknitr::opts_chunk$set(eval=TRUE, \n                      echo=FALSE,\n                      fig.align = \"center\")\n\noptions(htmltools.dir.version = TRUE)\n\nhtmltools::tagList(\n  xaringanExtra::use_clipboard(\n    button_text = \"<i class=\\\"fa fa-clipboard\\\"></i> Copy Code\",\n    success_text = \"<i class=\\\"fa fa-check\\\" style=\\\"color: #90BE6D\\\"></i> Copied!\",\n  ),\n  rmarkdown::html_dependency_font_awesome()\n)\n```\n\n```{css, eval=TRUE}\n.page-main img {\n  box-shadow: 0px 0px 2px 2px rgba( 0, 0, 0, 0.2 );\n}\n\n.tweet-timestamp {\n  display: block;\n  position: relative;\n  font-size: 1em;\n}\n.tweet-timestamp a .tweet-timestamp__text {\n  color: var(--text-light);\n}\n.tweet-timestamp a:hover .tweet-timestamp__text {\n  color: var(--text-mild);\n}\n.tweet-timestamp .tweet-link > i {\n\tdisplay: inline-block;\n\tposition: absolute;\n  left: -1.5em;\n  top: 3px;\n}\n```\n\n\n\nA brief walkthrough of the steps I took to deploy Umami web analytics for my personal website, as documented in a short Twitter thread.\n\n<!-- Code modified from https://github.com/gadenbuie/garrickadenbuie-com/blob/main/content/blog/2020/setting-up-a-new-macbook-pro/index.Rmarkdown -->\n\n\n```{r eval=FALSE}\nfirst_tweet_id <- \"1480703744220319750\"\nlast_tweet_id <- \"1483512641159147531\"\n\nlookup_thread <- function(status_id, tweets = NULL) {\n  tweet <- rtweet::lookup_tweets(status_id)\n  tweets <- dplyr::bind_rows(tweet, tweets)\n  if (is.na(tweet$reply_to_status_id)) {\n    return(tweets)\n  } else {\n    lookup_thread(tweet$reply_to_status_id, tweets)\n  }\n}\n\nthread <- lookup_thread(last_tweet_id)\nthread$text_markdown <- purrr::map_chr(thread$status_url, tweetrmd::tweet_markdown)\nsaveRDS(thread, \"umami-deploy-thread.rds\")\n```\n\n```{r trim-thread}\nthread <- readRDS(\"umami-deploy-thread.rds\")\n\nlookup_urls <-\n  bind_rows(\n    thread %>%\n      select(short = media_t.co, long = media_url) %>%\n      unnest(everything()),\n    thread %>%\n      select(short = urls_t.co, long = urls_expanded_url) %>%\n      unnest(everything())\n  ) %>%\n  drop_na()\n```\n\n```{r functions}\ntweet_plain_markdown <- function(x) {\n  x <- sub(\"(\\\\[pic.+?)?\\n>\\n> --- Silvia.+$\", \"\", x)\n  x <- strsplit(x, \"\\n\")[[1]]\n  # clean blockquote markdown\n  x <- sub(\"^> \", \"\", x)\n  # twitter made this next one a linked URL but it shouldn't be\n  x <- sub(\"<https://t.co/FsubHkjqKd>\", \"https://t.co/FsubHkjqKd\", x, fixed = TRUE)\n  # full inline links on new lines\n  x <- gsub(\"([^ ])<http\", \"\\\\1  \\n<http\", x)\n  # re-split because we may have added new lines\n  x <- strsplit(paste(x, collapse = \"\\n\"), \"\\n\")[[1]]\n  # # this one thing should be inline code\n  # x <- sub(\"brew install \\\\<x\\\\>\", \"`brew install <x>`\", x, fixed = TRUE)\n  # # code chunks\n  # x <- gsub(\"^\\\\s*(xcode|brew (cask|install|tap|search)|npm)(.+)$\",\n  #           \"```\\n\\\\1\\\\3\\n```\", x)\n  # x <- gsub(\"^\\\\s*(fish \\\\\\\\# to start|fisher install IlanCosman)(.+)$\", \"```\\n\\\\1\\\\2\\n```\", x)\n  # # r code chunks\n  # x <- gsub(\"^\\\\s*(install\\\\.packages|pak::)(.+)$\", \"```r\\n\\\\1\\\\2\\n```\", x)\n  x <- paste(x, collapse = \"\\n\")\n  # collapse code chunks together\n  gsub(\"```\\n```r?\", \"\", x)\n}\n\nprepend_status_url <- function(text_markdown, status_url, created_at) {\n  ts <- as.POSIXct(created_at)\n  paste0(\n    '<span class=\"tweet-timestamp\">',\n    '<a class=\"tweet-link\" href=\"', \n    status_url, '\" title=\"', \n    created_at, '\" target=\"_blank\" rel=\"noopener noreferrer\">',\n    '<span class=\"tweet-timestamp__text\">',\n    strftime(ts, \"%I:%M%P\", tz = \"America/New_York\"),\n    '<i class=\"pl2 fab fa-twitter fa-fw\"></i>',\n    '</span></a></span>',\n    text_markdown\n  )\n}\n\nappend_images <- function(text_markdown, ext_media_url) {\n  if (length(ext_media_url) == 1 && is.na(ext_media_url)) {\n    return(text_markdown)\n  }\n  if (!dir.exists(\"img\")) {\n    dir.create(\"img\")\n  }\n  for (ext_url in ext_media_url) {\n    image_path <- file.path(\"img\", basename(ext_url))\n    if (!file.exists(image_path)) {\n      download.file(ext_url, image_path)\n    }\n    text_markdown <- paste0(text_markdown, \"\\n\\n![](\", image_path, \")\")\n  }\n  text_markdown\n}\n\nadd_headings <- function(text_markdown, .row) {\n  headings <- c(\n    \"2\" = \"Installation\",\n    \"3\" = \"Railway\",\n    \"5\" = \"Tracker Configuration\",\n    \"6\" = \"Pricing\",\n    \"8\" = \"GoatCounter\",\n    \"9\" = \"Updating Umami\"\n  )\n  .row <- paste(.row)\n  if (.row %in% names(headings)) {\n    text_markdown <- paste0(\"\\n\\n## \", headings[.row], \"\\n\\n\", text_markdown)\n  }\n  text_markdown\n}\n```\n\n```{r test-functions, eval=FALSE}\nthread %>% \n  mutate(\n    text_markdown = map_chr(text_markdown,\n                            tweet_plain_markdown)\n  )\n\nthread[1,] %>%\n  mutate(text_markdown = tweet_plain_markdown(text_markdown),\n         text_markdown = prepend_status_url(\n           text_markdown,\n           status_url,\n           created_at),\n         # text_markdown = map2_chr(\n         #   text_markdown,\n         #   status_url,\n         #   created_at),\n         # text_markdown = imap(\n         #   text_markdown,\n         #   add_headings)\n         ) %>%\n  pull(text_markdown) %>% \n  paste(collapse = \"\\n\\n\")\n\n```\n\n```{r use-functions}\nthread_markdown <-\n  thread %>%\n  mutate(\n    text_markdown = map_chr(\n      text_markdown, tweet_plain_markdown),\n    text_markdown = prepend_status_url(\n      text_markdown, status_url, created_at),\n    text_markdown = map2_chr(\n      text_markdown, ext_media_url, append_images),\n    text_markdown = imap(\n      text_markdown, add_headings)\n    ) %>%\n  pull(text_markdown) %>%\n  paste(collapse = \"\\n\\n\")\n\nfor (i in seq_len(nrow(lookup_urls))) {\n  thread_markdown <- gsub(\n    lookup_urls$short[[i]], \n    lookup_urls$long[[i]], \n    thread_markdown, \n    fixed = TRUE)\n}\n\n# the markdown tweet text escapes some weird things that I need to unescape\nthread_markdown <- gsub(\"\\\\\\\\([.\\n<>_\\\"'`#~-])\",\n                        \"\\\\1\", \n                        thread_markdown)\n\n# but some __do__ need to be escaped\nthread_markdown <- gsub(\"  \\n\", \"  \\\\\\n\",\n                        thread_markdown)\n\nthread_markdown <- sub(\"command line utility <x>\",\n                       \"command line utility `<x>`\",\n                       thread_markdown)\n\n# inline referenced tweets\n# thread_markdown <- \n#   stringr::str_replace_all(\n#     thread_markdown,\n#     pattern = \"<https://twitter.com/.+?/status/\\\\d+?>\",\n#     replacement = function(status_url) {\n#       paste0(\"\\n\\n\",\n#              tweetrmd::tweet_markdown(\n#                gsub(\"^<|>$\", \"\", status_url)), \n#              \"\\n\")\n#     }\n#   )\n\n# fix spelling mistakes and other small things\n# thread_markdown <- stringr::str_replace_all(\n#   thread_markdown,\n#   c(\n#     \"Tog get\" = \"To get\",\n#     \"Big Sug\" = \"Big Sur\",\n#     \"(🍎.+?)\\n\" = \"\\\\1  \\n\",\n#     \"((↖️|↗️|↙️|↘️).+?)\\n\" = \"\\\\1  \\n\",\n#     \"(\\\\\\\\\\\\*reboots\\\\\\\\\\\\*)\\n\" = \"\\\\1  \\n\",\n#     \"\\\\{pak\\\\}\" = \"<span class=\\\"pkg\\\">[pak]</span>\",\n#     \"\\\\{tidyverse\\\\}\" = \"<span class=\\\"pkg\\\">[tidyverse]</span>\"\n#   )\n# )\n```\n\n\n`r thread_markdown`\n\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../assets/styles.css"],"highlight-style":"assets/silvia-syntax.theme","toc":true,"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.0.38","theme":["litera","../../assets/silvia-theme.scss"],"backgroundcolor":"#fffbf2","title-block-banner":false,"title":"Hello Umami: Deploying a Privacy-Friendly Open Source Tool for Web Analytics","layout":"single-sidebar","date":"2022-01-18","slug":"hello-umami","alias":null,"categories":["R","Website"],"tags":["R","blogdown","Hugo"],"image":"featured.jpg","subtitle":"A use case for adding Umami web analytics to a blogdown site and deploying using Railway.","summary":"A use case for adding Umami web analytics to a blogdown site and deploying using Railway.","featured":"yes","links":[{"icon":"chart-line","icon_pack":"fas","name":"Umami Docs","url":"https://umami.is"}]},"extensions":{"book":{"multiFile":true}}}}}